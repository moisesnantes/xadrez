	Skip to content
	Search or jump to…
	Pull requests
	Issues
	Marketplace
	Explore
	 
	@moisesnantes 
	acenelio
	/
	chess-system-java
	Public
	Code
	Issues
	2
	Pull requests
	Actions
	Projects
	Security
	Insights
	chess-system-java/src/chess/pieces/Pawn.java /
	@acenelio
	acenelio Special move - En Passant
	Latest commit c58df2b on 16 Jun 2018
	 History
	 1 contributor
	94 lines (83 sloc)  3.61 KB
	
	package chess.pieces;
	
	import boardgame.Board;
	import boardgame.Position;
	import chess.ChessMatch;
	import chess.ChessPiece;
	import chess.Color;
	
	public class Pawn extends ChessPiece {
	
		private ChessMatch chessMatch;
		
		public Pawn(Board board, Color color, ChessMatch chessMatch) {
			super(board, color);
			this.chessMatch = chessMatch;
		}
	
		@Override
		public boolean[][] possibleMoves() {
			boolean[][] mat = new boolean[getBoard().getRows()][getBoard().getColumns()];
			
			Position p = new Position(0, 0);
	
			if (getColor() == Color.WHITE) {
				p.setValues(position.getRow() - 1, position.getColumn());
				if (getBoard().positionExists(p) && !getBoard().thereIsAPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}
				p.setValues(position.getRow() - 2, position.getColumn());
				Position p2 = new Position(position.getRow() - 1, position.getColumn());
				if (getBoard().positionExists(p) && !getBoard().thereIsAPiece(p) && getBoard().positionExists(p2) && !getBoard().thereIsAPiece(p2) && getMoveCount() == 0) {
					mat[p.getRow()][p.getColumn()] = true;
				}
				p.setValues(position.getRow() - 1, position.getColumn() - 1);
				if (getBoard().positionExists(p) && isThereOpponentPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}			
				p.setValues(position.getRow() - 1, position.getColumn() + 1);
				if (getBoard().positionExists(p) && isThereOpponentPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}	
				
				// #specialmove en passant white
				if (position.getRow() == 3) {
					Position left = new Position(position.getRow(), position.getColumn() - 1);
					if (getBoard().positionExists(left) && isThereOpponentPiece(left) && getBoard().piece(left) == chessMatch.getEnPassantVulnerable()) {
						mat[left.getRow() - 1][left.getColumn()] = true;
					}
					Position right = new Position(position.getRow(), position.getColumn() + 1);
					if (getBoard().positionExists(right) && isThereOpponentPiece(right) && getBoard().piece(right) == chessMatch.getEnPassantVulnerable()) {
						mat[right.getRow() - 1][right.getColumn()] = true;
					}
				}
			}
			else {
				p.setValues(position.getRow() + 1, position.getColumn());
				if (getBoard().positionExists(p) && !getBoard().thereIsAPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}
				p.setValues(position.getRow() + 2, position.getColumn());
				Position p2 = new Position(position.getRow() + 1, position.getColumn());
				if (getBoard().positionExists(p) && !getBoard().thereIsAPiece(p) && getBoard().positionExists(p2) && !getBoard().thereIsAPiece(p2) && getMoveCount() == 0) {
					mat[p.getRow()][p.getColumn()] = true;
				}
				p.setValues(position.getRow() + 1, position.getColumn() - 1);
				if (getBoard().positionExists(p) && isThereOpponentPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}			
				p.setValues(position.getRow() + 1, position.getColumn() + 1);
				if (getBoard().positionExists(p) && isThereOpponentPiece(p)) {
					mat[p.getRow()][p.getColumn()] = true;
				}
				
				// #specialmove en passant black
				if (position.getRow() == 4) {
					Position left = new Position(position.getRow(), position.getColumn() - 1);
					if (getBoard().positionExists(left) && isThereOpponentPiece(left) && getBoard().piece(left) == chessMatch.getEnPassantVulnerable()) {
						mat[left.getRow() + 1][left.getColumn()] = true;
					}
					Position right = new Position(position.getRow(), position.getColumn() + 1);
					if (getBoard().positionExists(right) && isThereOpponentPiece(right) && getBoard().piece(right) == chessMatch.getEnPassantVulnerable()) {
						mat[right.getRow() + 1][right.getColumn()] = true;
					}
				}			
			}
			return mat;
		}
		
		@Override
		public String toString() {
			return "P";
		}
		
	}
	Footer
	© 2022 GitHub, Inc.
	Footer navigation
	Terms
	Privacy
	Security
	Status
	Docs
	Contact GitHub
	Pricing
	API
	Training
	Blog
	About
	You have no unread notifications